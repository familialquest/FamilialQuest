{
  "GetGroupId": "SELECT GroupID FROM Users WHERE ID = @ID;",
  "GetAccountIsMain": "SELECT IsMain FROM Accounts WHERE UserID = @UserID;",
  "ChangePassword": "UPDATE Accounts SET HASHPassword = @HASHPassword WHERE UserID = @UserID;",
  "ResetPassword": "UPDATE Accounts SET HASHPassword = @HASHPassword WHERE Login = @Login;",
  "RemoveAccessData": "UPDATE Accounts SET Token = '', DeviceID = '' WHERE UserID = @UserID;",
  "ChangeEmail": "UPDATE Accounts SET Login = @Login, Email = @Email WHERE UserID = @UserID;",
  "CheckAccountExist": "SELECT COUNT(*) FROM Accounts WHERE Login = @Login;",
  "GetRoleUsersCount": "SELECT COUNT(*) FROM Users WHERE GroupID = @GroupID AND Role = @Role AND Status != @RemovedStatus;",
  "GetAllUsersCount": "SELECT COUNT(*) FROM Users WHERE GroupID = @GroupID AND Status != @RemovedStatus;",
  "CheckTempAccountExist": "SELECT COUNT(*)FROM TempAccounts WHERE Email = @Email;",
  "InsertAccount": "INSERT INTO Accounts (Login, Email, HASHPassword, UserID, FailedLoginTryings, IsMain, Token, DeviceID, LastAction, CreationDate) VALUES (@Login, @Email, @HASHPassword, @UserID, @FailedLoginTryings, @IsMain, @Token, @DeviceID, @LastAction, @CreationDate);",
  "InsertTempAccount": "INSERT INTO TempAccounts (Email, HASHPassword, ConfirmCode, CreationDate) VALUES (@Email, @HASHPassword, @ConfirmCode, @CreationDate);",
  "RemoveTempAccount": "DELETE FROM TempAccounts WHERE Email = @Email;",
  "GetTempAccount": "SELECT Email, HASHPassword, ConfirmCode FROM TempAccounts WHERE Email = @Email;",
  "GetAccount": "SELECT Login, HASHPassword, UserID, IsMain, FailedLoginTryings, Token, DeviceID, LastAction, Email, CreationDate FROM Accounts WHERE Login = @Login;",
  "GetAccountById": "SELECT Login, HASHPassword, UserID, IsMain, FailedLoginTryings, Token, DeviceID, LastAction, Email, CreationDate FROM Accounts WHERE UserID = @UserID;",
  "SetAccessData": "UPDATE Accounts SET Token = @Token, {0} LastAction = @LastAction WHERE UserID = @UserID;",
  "RemoveOldTempAccounts": "DELETE FROM TempAccounts WHERE CreationDate < @lastDate;",
  "GetUsersWithOldTokens": "SELECT UserID FROM Accounts WHERE Token != '' AND LastAction < @lastDate;",
  "RemoveOldTokens": "UPDATE Accounts SET Token = '', DeviceID = '' WHERE Token != '' AND LastAction < @lastDate;",
  "ResetAllFailedLoginTryings": "UPDATE Accounts SET FailedLoginTryings = 0 WHERE FailedLoginTryings > 0;",
  "SetFailedLoginTryings": "UPDATE Accounts SET FailedLoginTryings = @FailedLoginTryings WHERE Login = @Login;",
  "CreateUser": "INSERT INTO Users (ID, Name, Title, Role, Coins, GroupID, Img, Status) VALUES (@ID, @Name, @Title, @Role, @Coins, @GroupID, @Img, @Status);",
  "RemoveUser": "UPDATE Users SET Status = @RemovedStatus WHERE ID=@ID AND GroupID = @GroupID;",
  "UpdateUser": "UPDATE Users SET Name = @Name, Title = @Title, Role = @Role, Coins = @Coins, Img = @Img WHERE ID = @ID AND GroupID = @GroupID;",
  "GetAllUsers": "SELECT ID, GroupID, Name, Title, Role, Coins, Img FROM Users WHERE GroupID = @GroupID AND Status != @RemovedStatus ORDER BY Name;",
  "GetUsersById": "SELECT ID, GroupID, Name, Title, Role, Coins, Img, Status FROM Users WHERE GroupID = @GroupID AND {0} ORDER BY Name;"
}